@use "colors";
@use "typography";
@use "tokens";
@use "sass:list";

// =============================================================================
// REUSABLE STATES & BASE BEHAVIORS
// =============================================================================

// Interactive states for inputs and buttons
@mixin interactive-state($type: 'input', $state: 'base') {
  @if $type == 'input' {
    @if $state == 'focus' {
      outline: none;
      border-color: colors.$input-focus;
      box-shadow: 0 0 0 tokens.$border-width-base rgba(tokens.$color-primary, 0.25);
    } @else if $state == 'hover' {
      background-color: colors.$input-hover;
    }
  } @else if $type == 'button' {
    @if $state == 'hover' {
      background-color: colors.$button-hover;
      box-shadow: 0 0 0.9375rem 0.3125rem colors.$button-glow;
    } @else if $state == 'active' {
      background-color: colors.$button-active;
      box-shadow: 0 0 0.5rem 0.125rem colors.$button-glow;
    } @else if $state == 'disabled' {
      opacity: 0.6;
      cursor: not-allowed;
    }
  }
  @content;
}

// Element visibility control
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;
  clip: rect(0 0 0 0);
  overflow: hidden;
  @content;
}

@mixin hidden {
  display: none;
  @content;
}

// Common flex alignment patterns
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

// Common transition pattern
@mixin standard-transition($properties...) {
  $transition-list: ();
  @each $prop in $properties {
    $transition-list: list.append($transition-list, $prop tokens.$transition-quick, comma);
  }
  transition: $transition-list;
}

// =============================================================================
// FORM ELEMENTS - BASE STYLES
// =============================================================================

// Consolidated form element mixin
@mixin form-element($type: 'text', $variant: 'default') {
  // Common base properties for all form elements
  display: block;
  width: 100%;
  box-sizing: border-box;
  padding: tokens.$spacing-sm;
  margin: 0;
  border-radius: tokens.$radius-sm;
  font-family: inherit;
  font-size: 1rem;
  line-height: 1.5;
  height: tokens.$size-input-height;
  
  // Theme-aware styling
  color: colors.$input-text;
  background-color: colors.$input-bg !important;
  border: tokens.$border-width-thin solid colors.$input-border;
  @include standard-transition(border-color, box-shadow, background-color);
  
  // Interactive states
  &:hover { @include interactive-state('input', 'hover'); }
  &:focus { @include interactive-state('input', 'focus'); }
  
  &::placeholder {
    color: colors.$input-placeholder;
    opacity: if($type == 'textarea', 0.7, 1);
  }
  
  // Type-specific styles
  @if $type == 'select' {
    line-height: 1;
    padding: 0 2.5rem 0 tokens.$spacing-sm;
    @include flex-center;
    cursor: pointer;
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    background-image: colors.$select-arrow-url !important;
    background-repeat: no-repeat !important;
    background-position: calc(100% - 8px) center !important;
    background-size: 24px !important;
    
    // Text overflow handling
    text-overflow: ellipsis;
    white-space: nowrap;
    overflow: hidden;
    
    &:hover, &:focus {
      background-color: colors.$form-selected !important;
    }
    
    // Dropdown styling
    option {
      background-color: #2a3441 !important;
      color: #ffffff !important;
      padding: tokens.$spacing-sm tokens.$spacing-md !important;
      text-shadow: 0 1px 0 rgba(0, 0, 0, 0.5) !important;
      font-weight: normal !important;
      
      &:hover, &:focus, &:active, &:checked {
        background-color: colors.$form-selected !important;
        color: #ffffff !important;
      }
    }
    
    // Browser compatibility
    &::-moz-focus-inner { border: 0; }
    &::-ms-expand { display: none; }
    
  } @else if $type == 'textarea' {
    min-height: 5rem;
    resize: vertical;
    line-height: 1.4;
    padding: tokens.$spacing-md;
    white-space: pre-wrap;
    overflow-y: auto;
  } @else if $type == 'number' {
    appearance: textfield;
    -moz-appearance: textfield;
    text-align: center;
    
    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
  }
  
  @content;
}

// Maintain backward compatibility with existing mixins
@mixin grid-compliant-text-input {
  @include form-element('text');
  @content;
}

@mixin grid-compliant-select {
  @include form-element('select');
  @content;
}

@mixin grid-compliant-textarea {
  @include form-element('textarea');
  @content;
}

@mixin grid-compliant-number-input {
  @include form-element('number');
  
  .base-form__number-input-wrapper:not(.compact) & {
    width: calc(100% - 4rem);
  }
  
  @content;
}

// Number input wrapper with increment/decrement buttons
@mixin grid-compliant-number-input-wrapper {
  @include flex-between;
  width: 100%;
  
  .decrement, .increment {
    width: 1.75rem;
    height: tokens.$size-input-height;
    border-radius: tokens.$radius-sm;
    border: tokens.$border-width-thin solid colors.$input-border;
    background-color: colors.$input-bg;
    color: colors.$input-text;
    @include flex-center;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    @include standard-transition(all);
    flex-shrink: 0;
    
    &:hover, &:focus {
      border-color: colors.$input-focus;
      background-color: colors.$input-focus;
      color: #ffffff;
      outline: none;
      box-shadow: 0 0 0 tokens.$border-width-base color-mix(in srgb, colors.$input-focus 25%, transparent);
    }
    
    &:active {
      transform: scale(0.95);
    }
  }
  
  &.compact {
    .decrement, .increment {
      display: none;
    }
    
    .base-form__number-input {
      width: 100%;
    }
  }
  
  // Container query for automatic adaptation
  @supports (container-type: inline-size) {
    container-type: inline-size;
    
    @container (max-width: 7rem) {
      .decrement, .increment {
        display: none !important;
      }
      
      .base-form__number-input {
        width: 100% !important;
      }
    }
  }
  
  @content;
}

// =============================================================================
// TOGGLE SWITCHES
// =============================================================================

// Consolidated toggle switch mixin
@mixin toggle-switch($variant: 'default') {
  // Hide the actual checkbox
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
  
  // Toggle display is a fixed-size element
  & ~ .toggle-switch-display {
    position: relative;
    display: block;
    width: tokens.$size-toggle-width;
    height: tokens.$size-toggle-height;
    
    // Prevent flexbox stretching
    flex: 0 0 tokens.$size-toggle-width;
    min-width: tokens.$size-toggle-width;
    max-width: tokens.$size-toggle-width;
    
    // Create the background track
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: tokens.$size-toggle-width;
      height: tokens.$size-toggle-height;
      background-color: colors.$input-bg;
      border-radius: tokens.$size-toggle-height;
      transition: background-color tokens.$transition-quick;
    }
    
    // Create the toggle knob
    &::after {
      content: '';
      position: absolute;
      left: tokens.$spacing-xxs;
      top: tokens.$spacing-xxs;
      width: tokens.$size-toggle-knob;
      height: tokens.$size-toggle-knob;
      background-color: colors.$c-dark;
      border-radius: tokens.$radius-round;
      transition: transform tokens.$transition-quick;
    }
  }
  
  // Checked state
  &:checked ~ .toggle-switch-display {
    &::before {
      background-color: colors.$input-focus;
    }
    
    &::after {
      transform: translateX(tokens.$size-toggle-translate);
    }
  }
  
  // Focus state
  &:focus ~ .toggle-switch-display {
    &::before {
      box-shadow: 0 0 0 tokens.$border-width-base rgba(tokens.$color-primary, 0.25);
    }
  }
  
  // Variant-specific styles
  @if $variant == 'left-aligned' {
    &:disabled ~ .toggle-switch-display {
      opacity: 0.6;
      cursor: not-allowed;
      
      &::before {
        background-color: colors.$form-input-disabled;
      }
    }
  } @else {
    &:disabled ~ .toggle-switch-display {
      opacity: 0.6;
      pointer-events: none;
      cursor: not-allowed;
      
      &::before, &::after {
        background-color: colors.$form-input-disabled;
      }
    }
  }
  
  @content;
}

// Maintain backward compatibility
@mixin grid-compliant-toggle-switch {
  @include toggle-switch('default');
  @content;
}

@mixin grid-compliant-toggle-switch-left {
  @include toggle-switch('left-aligned');
  @content;
}

@mixin grid-compliant-toggle-group {
  display: flex;
  align-items: center;
  position: relative;
  margin: 1rem 0;
  padding: tokens.$spacing-xs tokens.$spacing-sm tokens.$spacing-md tokens.$spacing-sm;
  
  label:first-child {
    @include form-label-base;
    min-width: 7.5rem;
    flex: 0 0 auto;
    flex-grow: 1;
    margin-right: tokens.$spacing-md;
    cursor: pointer;
    margin-bottom: 0;
  }
  
  .toggle-switch-wrapper {
    width: 2.5rem;
    flex: 0 0 2.5rem;
    position: relative;
    margin-left: auto;
    overflow: visible;
  }
  
  @content;
}

// =============================================================================
// FORM LABELS & GROUPS
// =============================================================================

@mixin form-group-base {
  display: flex;
  flex-direction: column;
  width: 100%;
  margin-bottom: 1rem;
  @content;
}

@mixin form-label-base {
  font-family: inherit;
  font-size: tokens.$font-size-label-base;
  font-weight: tokens.$font-weight-bold;
  color: colors.$label-text;
  margin-bottom: tokens.$spacing-xs;
  display: block;
  flex: 0, 0, tokens.$size-label-width;
  min-width: tokens.$size-label-width;
  @content;
}

@mixin form-label-small {
  @include form-label-base;
  font-size: tokens.$font-size-label-small;
  @content;
}

@mixin form-label-medium {
  @include form-label-base;
  font-size: tokens.$font-size-label-base;
  @content;
}

@mixin form-label-large {
  @include form-label-base;
  font-size: tokens.$font-size-label-large;
  @content;
}

@mixin form-label-with-icon {
  @include form-label-base;
  display: flex;
  align-items: center;
  flex-direction: row;
  @content;
}

@mixin checkbox-label {
  @include form-label-base;
  cursor: pointer;
  @content;
}

// =============================================================================
// FORM SECTIONS & FIELDSETS
// =============================================================================

@mixin grid-compliant-section-header {
  font-family: typography.$underdog;
  font-size: tokens.$font-size-section-header;
  color: #ffffff;
  padding: tokens.$spacing-md tokens.$spacing-base;
  margin: tokens.$spacing-lg 0 tokens.$spacing-base 0;
  border-bottom: tokens.$border-width-base solid tokens.$color-primary;
  position: relative;
  width: 100%;
  text-align: left;
  
  background: linear-gradient(
    to right,
    rgba(30, 40, 60, 0.8),
    rgba(20, 30, 45, 0.7)
  );
  
  &:first-of-type {
    margin-top: 0;
  }
  
  &.with-icon {
    padding-left: tokens.$size-toggle-width;
    
    &::before {
      content: '';
      position: absolute;
      left: tokens.$spacing-md;
      top: 50%;
      transform: translateY(-50%);
      width: tokens.$font-size-section-header;
      height: tokens.$font-size-section-header;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      opacity: 0.8;
    }
  }
  
  @content;
}

@mixin grid-compliant-fieldset {
  border: 1px solid #4d94ff;
  border-radius: tokens.$radius-sm;
  padding: 1rem;
  margin: 1rem 0;
  width: 100%;
  position: relative;
  background-color: rgba(25, 35, 50, 0.6);
  
  min-inline-size: auto;
  
  legend {
    font-family: typography.$underdog;
    font-size: 1rem;
    color: #ffffff;
    padding: 0 tokens.$spacing-sm;
    background-color: rgba(35, 45, 65, 0.9);
    border: 1px solid #4d94ff;
    border-radius: tokens.$radius-sm;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }
  
  fieldset {
    margin: tokens.$spacing-md 0;
    
    legend {
      font-size: 0.9rem;
    }
  }
  
  @content;
}

@mixin grid-compliant-collapsible-section {
  @include grid-compliant-fieldset;
  
  padding-top: 2rem;
  
  legend {
    cursor: pointer;
    user-select: none;
    display: flex;
    align-items: center;
    
    &::after {
      content: '▾';
      margin-left: tokens.$spacing-sm;
      transition: transform tokens.$transition-quick;
    }
  }
  
  &.collapsed {
    padding: 0;
    border-color: #4d94ff;
    
    legend {
      margin-bottom: 0;
      
      &::after {
        content: '▸';
      }
    }
    
    > *:not(legend) {
      display: none;
    }
  }
  
  @content;
}

@mixin grid-compliant-form-divider {
  width: 100%;
  height: 1px;
  background: linear-gradient(
    to right,
    transparent,
    #4d94ff,
    transparent
  );
  margin: 1.5rem 0;
  border: none;
  
  @content;
}

// =============================================================================
// BUTTONS
// =============================================================================

@mixin button($variant: 'default', $fullWidth: true) {
  // Core button styling (from original button-base)
  background-color: colors.$button-bg;
  color: colors.$button-text;
  border: tokens.$border-width-thin solid colors.$button-border;
  border-radius: tokens.$radius-sm;
  cursor: pointer;
  font-family: 'Underdog', serif;
  font-size: 1rem;
  line-height: 1.5;
  
  // Flex centering (from original)
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  min-height: 2.25rem;
  
  // Width handling (from grid-compliant-button)
  @if $fullWidth {
    width: 100%;
  }
  
  // Interactive states
  transition: all tokens.$transition-quick;
  
  &:hover {
    @include interactive-state('button', 'hover');
  }
  
  &:active {
    @include interactive-state('button', 'active');
  }
  
  &:disabled {
    @include interactive-state('button', 'disabled');
  }
  
  @content;
}

// Maintain backward compatibility with grid-compliant-button
@mixin grid-compliant-button($variant: 'default', $fullWidth: true) {
  @include button($variant, $fullWidth);
  min-height: tokens.$size-button-height;
  font-weight: 500;
  margin: 0;
  display: flex;
  box-sizing: border-box;
  @content;
}

// =============================================================================
// COLOR PICKERS
// =============================================================================

// Consolidated color picker mixin
@mixin color-picker($variant: 'default') {
  // Base properties
  display: block;
  width: if($variant == 'compact', tokens.$size-color-compact, 100%);
  height: if($variant == 'compact', tokens.$size-color-height-compact, tokens.$size-input-height);
  padding: tokens.$spacing-xxs;
  border-radius: tokens.$radius-sm;
  cursor: pointer;
  box-sizing: border-box;
  background-color: colors.$input-bg;
  border: tokens.$border-width-thin solid colors.$input-border;
  
  // Variant-specific styles
  @if $variant == 'compact' {
    margin-left: auto;
    flex: 0 0 auto;
  }
  
  @if $variant == 'with-preview' {
    display: flex;
    align-items: center;
    
    &::before {
      content: "";
      display: block;
      width: tokens.$size-color-preview;
      height: tokens.$size-toggle-height;
      border-radius: tokens.$radius-xs;
      margin-right: tokens.$spacing-sm;
      box-shadow: inset 0 0 0 tokens.$border-width-thin rgba(0, 0, 0, 0.2);
      background-color: currentColor;
    }
  }
  
  // Interactive states
  &:hover {
    border-color: colors.$input-hover;
    box-shadow: 0 0 tokens.$spacing-md 0 rgba(0, 0, 0, 0.15);
  }
  
  &:focus {
    @include interactive-state('input', 'focus');
  }
  
  // Browser-specific overrides
  &::-webkit-color-swatch-wrapper {
    padding: 0;
    border: none;
  }
  
  &::-webkit-color-swatch {
    border: none;
    border-radius: tokens.$radius-xs;
  }
  
  &::-moz-color-swatch {
    border: none;
    border-radius: tokens.$radius-xs;
  }
  
  @content;
}

// Maintain backward compatibility with existing mixins
@mixin grid-compliant-color-picker {
  @include color-picker('default');
  @content;
}

@mixin grid-compliant-color-picker-compact {
  @include color-picker('compact');
  @content;
}

@mixin grid-compliant-color-picker-with-preview {
  @include color-picker('with-preview');
  @content;
}

// Color picker with hex input - keep as is since it's a composite component
@mixin grid-compliant-color-picker-with-hex {
  display: flex;
  flex-direction: column;
  width: 100%;
  box-sizing: border-box;
  margin-bottom: 1rem;
  @content;
}

// Container for color picker
@mixin color-picker-container {
  position: relative;
  display: flex;
  align-items: center;
  gap: tokens.$spacing-md;
  width: 100%;
  box-sizing: border-box;
  padding: tokens.$spacing-xxs tokens.$spacing-xs; 
  overflow: visible;
  @content;
}

// Preview box for color picker
@mixin color-picker-preview {
  width: 1.5rem;
  height: 1.5rem;
  border-radius: tokens.$radius-xs;
  border: tokens.$border-width-thin solid colors.$input-border;
  margin-right: tokens.$spacing-xs;
  flex: 0 0 auto;
  overflow: hidden;
  display: none;
  @content;
}

// Hex input for color picker
@mixin color-picker-hex-input {
  @include grid-compliant-text-input;
  flex: 1 1 auto;
  min-width: 5rem;
  font-family: monospace;
  text-transform: uppercase;
  box-sizing: border-box;
  margin-right: tokens.$spacing-xs;
  
  &::placeholder {
    text-transform: none;
  }
  
  &:focus {
    outline: none;
    border-color: colors.$input-focus;
    box-shadow: 0 0 0.375rem 0.0625rem rgba(tokens.$color-primary, 0.5);
  }
  
  &.invalid {
    border-color: colors.$form-incorrect;
    box-shadow: 0 0 0.25rem 0.0625rem rgba(tokens.$color-danger, 0.3);
  }
  
  @content;
}

// =============================================================================
// RANGE SLIDERS
// =============================================================================

// Consolidated range slider mixin
@mixin range-slider($variant: 'default') {
  // Base properties
  -webkit-appearance: none;
  appearance: none;
  width: 100%;
  height: if($variant == 'compact', tokens.$size-range-track-height-compact, tokens.$size-range-track-height);
  background: colors.$input-bg;
  border-radius: tokens.$radius-sm;
  outline: none;
  margin: if($variant == 'compact', tokens.$spacing-sm, tokens.$spacing-md) 0;
  cursor: pointer;
  border: tokens.$border-width-thin solid colors.$input-border;
  
  &:focus {
    @include interactive-state('input', 'focus');
  }
  
  // Thumb styling
  &::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: if($variant == 'compact', tokens.$size-range-thumb-compact, tokens.$size-range-thumb);
    height: if($variant == 'compact', tokens.$size-range-thumb-compact, tokens.$size-range-thumb);
    border-radius: tokens.$radius-round;
    background: tokens.$color-primary;
    cursor: pointer;
    border: tokens.$border-width-thin solid tokens.$color-primary-dark;
    box-shadow: tokens.$shadow-sm;
    transition: all tokens.$transition-quick;
    
    &:hover {
      background: tokens.$color-primary-light;
      transform: scale(1.1);
    }
    
    &:active {
      background: tokens.$color-primary;
      transform: scale(0.95);
    }
  }
  
  &::-moz-range-thumb {
    width: if($variant == 'compact', tokens.$size-range-thumb-compact, tokens.$size-range-thumb);
    height: if($variant == 'compact', tokens.$size-range-thumb-compact, tokens.$size-range-thumb);
    border-radius: tokens.$radius-round;
    background: tokens.$color-primary;
    cursor: pointer;
    border: tokens.$border-width-thin solid tokens.$color-primary-dark;
    box-shadow: tokens.$shadow-sm;
    transition: all tokens.$transition-quick;
    
    &:hover {
      background: tokens.$color-primary-light;
      transform: scale(1.1);
    }
    
    &:active {
      background: tokens.$color-primary;
      transform: scale(0.95);
    }
  }
  
  &::-moz-range-track {
    width: 100%;
    height: if($variant == 'compact', tokens.$size-range-track-height-compact, tokens.$size-range-track-height);
    background: colors.$input-bg;
    border-radius: tokens.$radius-sm;
    border: tokens.$border-width-thin solid colors.$input-border;
  }
  
  @content;
}

// Maintain backward compatibility with existing mixins
@mixin grid-compliant-range-slider {
  @include range-slider('default');
  @content;
}

@mixin grid-compliant-range-slider-compact {
  @include range-slider('compact');
  @content;
}

// Range slider wrapper - keep as is since it's a composite component
@mixin grid-compliant-slider-wrapper {
  display: flex;
  align-items: center;
  width: 100%;
  gap: tokens.$spacing-md;
  
  .base-form__range-slider {
    flex: 1;
  }
  
  .base-form__range-value {
    font-family: monospace;
    font-size: tokens.$size-icon-sm;
    color: colors.$input-text;
    min-width: tokens.$size-range-value-min-width;
    text-align: center;
    background-color: colors.$input-bg;
    padding: tokens.$spacing-xs tokens.$spacing-sm;
    border-radius: tokens.$radius-sm;
    border: tokens.$border-width-thin solid colors.$input-border;
  }
  
  @content;
}

// =============================================================================
// LEGACY MIXINS FOR BACKWARD COMPATIBILITY
// =============================================================================

// These are kept for backward compatibility only
@mixin _input-focus-state {
  @include interactive-state('input', 'focus');
  @content;
}

@mixin _input-hover-state {
  @include interactive-state('input', 'hover');
  @content;
}

@mixin _button-base-styles {
  @include button-base;
  @content;
}

@mixin _number-input-base {
  appearance: textfield;
  -moz-appearance: textfield;
  height: tokens.$size-input-height;
  
  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  text-align: center;
  @content;
}

@mixin _color-picker-base {
  @include color-picker-base;
  @content;
}

@mixin _range-slider-base {
  @include range-slider-base;
  @content;
}

@mixin _toggle-switch-base {
  @include toggle-switch-base;
  @content;
}