@use "colors";
@use "typography";

@mixin element-invisible {
  position: absolute;

  width: 1px;
  height: 1px;
  margin: -1px;
  border: 0;
  padding: 0;

  clip: rect(0 0 0 0);
  overflow: hidden;
}

@mixin hide {
  display: none;
}

@mixin input-base {
  display: block;
  width: 100%;
  box-sizing: border-box;
  padding: 0.5rem;
  margin: 0;
  border-radius: 0.25rem;
  font-family: inherit;
  font-size: 1rem;
  line-height: 1.5;
}

@mixin grid-compliant-text-input {
  @include input-base;
  
  // Theme-aware styling
  color: colors.$input-text;
  background-color: colors.$input-bg !important;
  border: 0.0625rem solid colors.$input-border;
  border-radius: 0.25rem;
  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, background-color 0.2s ease-in-out;
  
  &:hover {
    background-color: colors.$input-hover;
  }
  
  &:focus {
    outline: none;
    border-color: colors.$input-focus;
    box-shadow: 0 0 0 0.125rem color-mix(in srgb, colors.$input-focus 25%, transparent);
  }
  
  &::placeholder {
    color: colors.$input-placeholder;
    opacity: 1;
  }
}

@mixin grid-compliant-select {
  // Base styling from text input
  @include input-base;
  
  // Theme-aware styling
  color: colors.$input-text;
  background-color: colors.$input-bg !important; // Same as text input for consistency
  border: 1px solid colors.$input-border;
  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, background-color 0.2s ease-in-out;
  
  // Select-specific styling - fixing vertical alignment issues
  // height: 2rem; // Explicit height
  line-height: 1; // Tighter line height for better vertical centering
  padding: 0 2.5rem 0 0.5rem; // Adjust padding (top, right, bottom, left)
  display: flex; // Using flex for better alignment
  align-items: center; // Center content vertically
  cursor: pointer;
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  background-image: colors.$select-arrow-url !important;
  background-repeat: no-repeat !important;
  background-position: calc(100% - 8px) center !important;
  background-size: 24px !important;
  
  // Text overflow handling
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
  
  &:hover {
    background-color: colors.$form-selected;
  }
  
  &:focus {
    outline: none;
    border-color: colors.$input-focus;
    box-shadow: 0 0 0 2px color-mix(in srgb, colors.$input-focus 25%, transparent);
  }
  
  &:hover, &:focus {
    background-color: colors.$form-selected !important; // Dark blue for hover state
  }
}

// This mixin should be used separately on select elements
// Browser dropdown styling is handled differently and can't be fully controlled via the select element
@mixin select-dropdown-styles {
  // This addresses styling for the dropdown items
  option {
    background-color: #2a3441 !important; // Darker background for better contrast
    color: #ffffff !important; // White text for maximum visibility
    padding: 0.5rem 0.75rem !important; // More horizontal padding
    text-shadow: 0 1px 0 rgba(0, 0, 0, 0.5) !important; // Add text shadow for better visibility
    font-weight: normal !important; // Normal weight for better legibility
    
    &:hover, &:focus, &:active, &:checked {
      background-color: colors.$form-selected !important; // Dark blue for selection
      color: #ffffff !important;
    }
  }
  
  // For Firefox
  &::-moz-focus-inner {
    border: 0;
  }
  
  // For IE/Edge
  &::-ms-expand {
    display: none;
  }
  
  // For Chrome/Safari
  &::-webkit-scrollbar {
    width: 8px;
    background-color: #2a3441;
  }
  
  &::-webkit-scrollbar-thumb {
    background-color: #4d94ff;
    border-radius: 4px;
  }
}

@mixin grid-compliant-toggle-switch {

  // Hide the actual checkbox
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
  
  // Toggle display is a fixed-size element
  & ~ .toggle-switch-display {
    // Basic positioning and dimensions
    position: relative;
    display: block;
    width: 2.5rem;  
    height: 1.25rem; 
    
    // Prevent flexbox stretching
    flex: 0 0 2.5rem; 
    min-width: 2.5rem; 
    max-width: 2.5rem; 
    
    // Create the background track
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 2.5rem; 
      height: 1.25rem; 
      background-color: colors.$input-border;
      border-radius: 1.25rem; 
      transition: background-color 0.2s ease-in-out;
    }
    
    // Create the toggle knob
    &::after {
      content: '';
      position: absolute;
      left: 0.125rem; 
      top: 0.125rem; 
      width: 1rem; 
      height: 1rem; 
      background-color: #ffffff;
      border-radius: 50%;
      transition: transform 0.2s ease-in-out;
    }
  }
  
  // Checked state
  &:checked ~ .toggle-switch-display {
    &::before {
      background-color: colors.$input-focus; 
    }
    
    &::after {
      transform: translateX(1.25rem); 
    }
  }
  
  // Focus state
  &:focus ~ .toggle-switch-display {
    &::before {
      box-shadow: 0 0 0 0.125rem color-mix(in srgb, colors.$input-focus 25%, transparent); 
    }
  }
  
  // Disabled state
  &:disabled ~ .toggle-switch-display {
    opacity: 0.6;
    pointer-events: none;
    cursor: not-allowed;
    
    &::before, &::after {
      background-color: colors.$form-input-disabled;
    }
  }
}

@mixin grid-compliant-toggle-switch-left {
  // Hide the actual checkbox
  position: absolute;
  opacity: 0;
  width: 0;
  height: 0;
  
  // Toggle display is a fixed-size element
  & ~ .toggle-switch-display {
    // Basic positioning and dimensions
    position: relative;
    display: block;
    width: 2.5rem;  
    height: 1.25rem; 
    
    // Prevent flexbox stretching
    flex: 0 0 2.5rem; 
    min-width: 2.5rem; 
    max-width: 2.5rem; 
    
    // For left alignment, we don't need special positioning
    // as it will naturally align left in its container
    
    // Create the background track
    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 2.5rem; 
      height: 1.25rem; 
      background-color: colors.$input-border;
      border-radius: 1.25rem; 
      transition: background-color 0.2s ease-in-out;
    }
    
    // Create the toggle knob
    &::after {
      content: '';
      position: absolute;
      left: 0.125rem; 
      top: 0.125rem; 
      width: 1rem; 
      height: 1rem; 
      background-color: #ffffff;
      border-radius: 50%;
      transition: transform 0.2s ease-in-out;
    }
  }
  
  // Checked state
  &:checked ~ .toggle-switch-display {
    &::before {
      background-color: colors.$input-focus; 
    }
    
    &::after {
      transform: translateX(1.25rem); 
    }
  }
  
  // Focus state for accessibility
  &:focus ~ .toggle-switch-display {
    &::before {
      box-shadow: 0 0 0 0.125rem color-mix(in srgb, colors.$input-focus 25%, transparent);
    }
  }
  
  // Disabled state
  &:disabled ~ .toggle-switch-display {
    opacity: 0.6;
    cursor: not-allowed;
    
    &::before {
      background-color: colors.$form-input-disabled;
    }
  }
}

@mixin form-group-base {
  display: flex;
  flex-direction: column;
  width: 100%;
  margin-bottom: 1rem;
}

@mixin form-label-base {
  font-family: inherit;
  font-size: 1.125rem; 
  font-weight: 700; 
  color: colors.$label-text;
  margin-bottom: 0.375rem;
  display: block;
}

@mixin form-label-small {
  @include form-label-base;
  font-size: 0.75rem;
}

@mixin form-label-medium {
  @include form-label-base;
  font-size: 1.125rem;
}

@mixin form-label-large {
  @include form-label-base;
  font-size: 1.5rem;
}

@mixin form-label-with-icon {
  @include form-label-base;
  display: flex;
  align-items: center;
  flex-direction: row;
}

@mixin checkbox-label {
  @include form-label-base;
  cursor: pointer;
}

@mixin button-base {
  // Core button styling that all buttons share
  background-color: colors.$button-bg;
  color: colors.$button-text;
  border: 0.0625rem solid colors.$button-border;
  border-radius: 0.25rem;
  padding: 0.5rem 1rem;
  cursor: pointer;
  font-family: 'Underdog', serif;
  font-size: 1rem;
  line-height: 1.5;
  
  // Flex centering for all buttons
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  min-height: 2.25rem;
  
  transition: all 0.2s ease-in-out;
  
  // Interactive states
  &:hover {
    background-color: colors.$button-hover;
    box-shadow: 0 0 0.9375rem 0.3125rem colors.$button-glow;
  }
  
  &:active {
    background-color: colors.$button-active;
    box-shadow: 0 0 0.5rem 0.125rem colors.$button-glow;
  }
  
  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin grid-compliant-button {
  // Start with the base button styling
  @include button-base;
  
  // Grid-specific properties (only changing display and width)
  display: flex;
  width: 100%;
  box-sizing: border-box;
  font-weight: 500;
  margin: 0;
  min-height: 2.5rem; // Slightly taller than base buttons
}

@mixin grid-compliant-color-picker {
  // Base styling - grouped all base properties together
  display: block;
  width: 100%;
  height: 2.5rem;
  padding: 0.125rem;
  border-radius: 0.25rem;
  cursor: pointer;
  box-sizing: border-box;
  background-color: colors.$input-bg;
  border: 0.0625rem solid colors.$input-border;
  
  // States
  &:hover {
    border-color: colors.$input-hover;
    box-shadow: 0 0 0.5rem 0 rgba(0, 0, 0, 0.15);
  }
  
  &:focus {
    outline: none;
    border-color: colors.$input-focus;
    box-shadow: 0 0 0 0.125rem color-mix(in srgb, colors.$input-focus 25%, transparent);
  }
  
  // Browser-specific overrides
  &::-webkit-color-swatch-wrapper {
    padding: 0;
    border: none;
  }
  
  &::-webkit-color-swatch {
    border: none;
    border-radius: 0.125rem;
  }
  
  &::-moz-color-swatch {
    border: none;
    border-radius: 0.125rem;
  }
}

@mixin grid-compliant-color-picker-compact {
  @include grid-compliant-color-picker;
  width: 3.125rem;
  height: 1.875rem;
  margin-left: auto;
  flex: 0 0 auto;
}

@mixin grid-compliant-color-picker-with-preview {
  @include grid-compliant-color-picker;
  display: flex;
  align-items: center;
  
  &::before {
    content: "";
    display: block;
    width: 2rem;
    height: 1.25rem;
    border-radius: 0.125rem;
    margin-right: 0.5rem;
    box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.2);
    background-color: currentColor;
  }
}

@mixin grid-compliant-color-picker-with-hex {
  display: flex;
  flex-direction: column;
  width: 100%;
  box-sizing: border-box;
  margin-bottom: 1rem;
}

@mixin color-picker-container {
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.625rem;
  width: 100%;
  box-sizing: border-box;
  padding: 0.125rem 0.25rem; 
  overflow: visible; 
}

@mixin color-picker-preview {
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 0.1875rem;
  border: 0.0625rem solid colors.$input-border;
  margin-right: 0.3125rem;
  flex: 0 0 auto;
  overflow: hidden;
}

@mixin color-picker-hex-input {
  @include grid-compliant-text-input;
  flex: 1 1 auto;
  min-width: 5rem;
  font-family: monospace;
  text-transform: uppercase;
  box-sizing: border-box;
  margin-right: 0.25rem; // Extra margin on the right to prevent glow clipping
  
  &::placeholder {
    text-transform: none;
  }
  
  // Adjust focus styles to make them more contained
  &:focus {
    outline: none;
    border-color: colors.$input-focus;
    box-shadow: 0 0 0.375rem 0.0625rem color-mix(in srgb, colors.$input-focus 50%, transparent);
  }
  
  // Style for invalid hex values
  &.invalid {
    border-color: colors.$form-incorrect;
    box-shadow: 0 0 0.25rem 0.0625rem color-mix(in srgb, colors.$form-incorrect 30%, transparent);
  }
}

@mixin grid-compliant-number-input {
  // Use the same text input mixin as other inputs for consistency
  @include grid-compliant-text-input;
  
  // Allow the input to fill the available space
  width: 100%;
  text-align: center;
  margin: 0;
  
  // Ensure consistent appearance across browsers
  appearance: textfield;
  -moz-appearance: textfield;
  
  // Remove default browser spinners
  &::-webkit-outer-spin-button,
  &::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }
  
  // Adjust width based on container context
  .base-form__number-input-wrapper:not(.compact) & {
    width: calc(100% - 4rem);
  }
}

@mixin grid-compliant-number-input-wrapper {
  position: relative;
  display: flex;
  width: 100%;
  align-items: center;
  justify-content: space-between;
  
  // Responsive behavior
  &.compact {
    .decrement, .increment {
      display: none;
    }
    
    .base-form__number-input {
      width: 100%;
    }
  }
  
  // Container query for automatic adaptation (for browsers that support it)
  @supports (container-type: inline-size) {
    container-type: inline-size;
    
    @container (max-width: 9rem) {
      .decrement, .increment {
        display: none;
      }
      
      .base-form__number-input {
        width: 100%;
      }
    }
  }
  
  .decrement, .increment {
    width: 1.75rem;
    height: 1.75rem;
    border-radius: 0.25rem;
    border: 0.0625rem solid colors.$input-border;
    background-color: colors.$input-bg;
    color: colors.$input-text;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
    
    &:hover, &:focus {
      border-color: colors.$input-focus;
      background-color: colors.$input-focus;
      color: #ffffff;
      outline: none;
      box-shadow: 0 0 0 0.125rem color-mix(in srgb, colors.$input-focus 25%, transparent);
    }
    
    &:active {
      transform: scale(0.95);
    }
  }
}

@mixin grid-compliant-textarea {
  // Start with the base text input styling
  @include grid-compliant-text-input;
  
  // Textarea-specific properties
  min-height: 5rem;
  resize: vertical;
  line-height: 1.4;
  padding: 0.75rem;
  
  // Preserve whitespace formatting but wrap text
  white-space: pre-wrap;
  
  // Optimize scrolling behavior
  overflow-y: auto;
  
  // Placeholder text styling
  &::placeholder {
    color: colors.$input-placeholder;
    opacity: 0.7;
  }
  
  // Focus styling that allows for resizing
  &:focus {
    outline: none;
    border-color: colors.$input-focus;
    box-shadow: 0 0 0 0.125rem color-mix(in srgb, colors.$input-focus 25%, transparent);
  }
}

// Form Section Dividers and Fieldsets
// ----------------------------------

@mixin grid-compliant-section-header {
  font-family: typography.$underdog;
  font-size: 1.25rem;
  color: #ffffff; // White text for dark backgrounds
  padding: 0.75rem 1rem;
  margin: 1.5rem 0 1rem 0;
  border-bottom: 2px solid #4d94ff; // Dark blue border
  position: relative;
  width: 100%;
  text-align: left;
  
  // Add subtle gradient background
  background: linear-gradient(
    to right,
    rgba(30, 40, 60, 0.8), // Dark blue-gray with some transparency
    rgba(20, 30, 45, 0.7)  // Slightly darker and more transparent
  );
  
  // First header in a form should have no top margin
  &:first-of-type {
    margin-top: 0;
  }
  
  // Optional icon support
  &.with-icon {
    padding-left: 2.5rem;
    
    &::before {
      content: '';
      position: absolute;
      left: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      width: 1.25rem;
      height: 1.25rem;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center;
      opacity: 0.8;
    }
  }
}

@mixin grid-compliant-fieldset {
  border: 1px solid #4d94ff; // Dark blue border
  border-radius: 0.25rem;
  padding: 1rem;
  margin: 1rem 0;
  width: 100%;
  position: relative;
  background-color: rgba(25, 35, 50, 0.6); // Dark blue-gray with transparency
  
  // Remove default fieldset styles
  min-inline-size: auto;
  
  // Legend styling
  legend {
    font-family: typography.$underdog;
    font-size: 1rem;
    color: #ffffff;
    padding: 0 0.5rem;
    background-color: rgba(35, 45, 65, 0.9); // Slightly lighter than fieldset
    border: 1px solid #4d94ff; // Dark blue border
    border-radius: 0.25rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
  }
  
  // Nested fieldsets
  fieldset {
    margin: 0.75rem 0;
    
    legend {
      font-size: 0.9rem;
    }
  }
}

@mixin grid-compliant-collapsible-section {
  // Base fieldset styling
  @include grid-compliant-fieldset;
  
  // Additional styles for collapsible behavior
  padding-top: 2rem;
  
  // Legend styling for collapsible sections
  legend {
    cursor: pointer;
    user-select: none;
    display: flex;
    align-items: center;
    
    &::after {
      content: '▾';
      margin-left: 0.5rem;
      transition: transform 0.2s ease;
    }
  }
  
  // Collapsed state
  &.collapsed {
    padding: 0;
    border-color: #4d94ff; // Dark blue border
    
    legend {
      margin-bottom: 0;
      
      &::after {
        content: '▸';
      }
    }
    
    // Hide content when collapsed
    > *:not(legend) {
      display: none;
    }
  }
}

@mixin grid-compliant-form-divider {
  width: 100%;
  height: 1px;
  background: linear-gradient(
    to right,
    transparent,
    #4d94ff, // Dark blue for divider
    transparent
  );
  margin: 1.5rem 0;
  border: none;
}