// ===================================
// ABILITY CARDS COMPONENT
// ===================================
// Reusable ability display system with interactive buttons and status indicators
// Extracted from character sheet and modernized following refactoring guidelines

@use "../../utils/themes" as themes;
@use "../../utils/sheet-tokens" as tokens;
@use "sass:color";

// ===================================
// CONFIGURATION VARIABLES
// ===================================
// Using sheet-tokens for consistent design system integration

// Ability colors mapping
$ability-colors: (
  "acro": #bf4400,
  "phys": #a80303,
  "fort": #2d682d,
  "will": #6a1b9a,
  "wits": #0e4380
);

// Card dimensions and spacing
$card-height: tokens.$sheet-height-ability-card;
$card-padding: tokens.$sheet-padding-input;
$card-gap: tokens.$sheet-spacing-sm;
$card-border-radius: tokens.$sheet-radius-sm;
$card-border-width: tokens.$sheet-border-base;
$card-border-accent: tokens.$sheet-border-accent;

// Input and button dimensions
$input-width: tokens.$sheet-width-input;
$input-height: tokens.$sheet-height-input;
$button-width: tokens.$sheet-width-button;
$button-height: tokens.$sheet-height-button;
$status-size: tokens.$sheet-size-status-element;

// Typography
$label-font-size: tokens.$sheet-font-size-sm;
$input-font-size: tokens.$sheet-font-size-md;
$icon-font-size: tokens.$sheet-font-size-label-lg;
$font-weight-semibold: tokens.$sheet-font-weight-semibold;
$letter-spacing: tokens.$sheet-letter-spacing-tight;
$line-height: tokens.$sheet-line-height-tight;

// Borders and radius
$border-thin: tokens.$sheet-border-thin;
$radius-xs: tokens.$sheet-radius-xs;

// Shadows and effects
$shadow-blur-xs: tokens.$sheet-shadow-blur-xs;
$shadow-blur-sm: tokens.$sheet-shadow-blur-sm;
$shadow-blur-md: tokens.$sheet-shadow-blur-md;
$shadow-blur-lg: tokens.$sheet-shadow-blur-lg;
$shadow-offset-xs: tokens.$sheet-shadow-offset-xs;
$shadow-offset-sm: tokens.$sheet-shadow-offset-sm;
$glow-blur-sm: tokens.$sheet-glow-blur-sm;

// Transitions and animations
$transition-base: tokens.$sheet-transition-base;
$transition-medium: tokens.$sheet-transition-medium;
$animation-fast: tokens.$sheet-animation-fast;
$animation-shimmer: tokens.$sheet-animation-shimmer;

// Transforms and opacity
$transform-hover-sm: tokens.$sheet-transform-hover-sm;
$transform-scale-active: tokens.$sheet-transform-scale-active;
$transform-scale-hover: tokens.$sheet-transform-scale-hover;
$transform-scale-icon: tokens.$sheet-transform-scale-icon;
$opacity-default: tokens.$sheet-opacity-default;
$opacity-full: tokens.$sheet-opacity-full;

// Layout dimensions
$header-min-width: tokens.$sheet-width-header-min;
$header-max-width: tokens.$sheet-width-header-max;
$header-width: tokens.$sheet-width-header;
$spacing-xs: tokens.$sheet-spacing-xs;
$spacing-sm: tokens.$sheet-spacing-sm;

// ===================================
// UTILITY MIXINS
// ===================================

// Base ability card styling
@mixin ability-card-base {
  display: flex;
  flex-direction: row;
  align-items: center;
  border-radius: $card-border-radius;
  border: $card-border-width solid transparent;
  background: linear-gradient(
    135deg,
    themes.color(black, 30) 0%,
    themes.color(gray-dark, 40) 50%,
    themes.color(black, 30) 100%
  );
  padding: $card-padding;
  transition: all $transition-medium ease;
  position: relative;
  overflow: hidden;
  cursor: pointer;
  height: $card-height;
  width: 100%;
  max-width: 100%;
  min-width: 0;
}

// Ability card left border indicator
@mixin ability-card-border-indicator {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: $card-border-accent;
  height: 100%;
  z-index: 1;
  transition: all $transition-medium ease;
}

// Input styling for ability cards
@mixin ability-card-input {
  display: flex;
  align-items: center;
  justify-content: center;
  width: $input-width;
  height: $input-height;
  min-height: $input-height;
  max-height: $input-height;
  padding: 0;
  margin: 0;
  font-size: $input-font-size;
  line-height: $line-height;
  text-align: center;
  background: themes.color(black, 30);
  border: $border-thin solid themes.color(white, 20);
  border-radius: $radius-xs;
  color: themes.color(white);
  flex-shrink: 0;
  box-sizing: border-box;
  vertical-align: middle;
  font-family: inherit;
  font-weight: normal;
  letter-spacing: normal;
  text-transform: none;

  &:focus {
    border-color: themes.color(white, 50);
    box-shadow: 0 0 $shadow-blur-xs themes.color(white, 30);
    outline: none;
  }

  &:hover {
    border-color: themes.color(white, 40);
  }
}

// Button styling for ability cards
@mixin ability-card-button {
  display: flex;
  align-items: center;
  justify-content: center;
  width: $button-width;
  height: $button-height;
  min-height: $button-height;
  max-height: $button-height;
  min-width: $button-width;
  max-width: $button-width;
  padding: 0;
  margin: 0;
  border-radius: $radius-xs;
  color: themes.color(white);
  cursor: pointer;
  transition: all $transition-base ease;
  flex-shrink: 0;
  font-size: $input-font-size;
  font-weight: bold;
  line-height: $line-height;
  position: relative;
  overflow: hidden;
  box-sizing: border-box;
  vertical-align: middle;
  text-decoration: none;
  text-transform: none;
  letter-spacing: normal;

  // Default styling
  background: themes.color(white, 10);
  border: $border-thin solid themes.color(white, 30);
  text-shadow: 0 0 $shadow-blur-xs themes.color(white, 60);
  box-shadow:
    0 0 $shadow-blur-sm themes.color(white, 40),
    inset 0 $shadow-offset-xs 0 themes.color(white, 20);

  &:active {
    transform: scale($transform-scale-active);
  }

  // Subtle animated background shimmer
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      themes.color(white, 20),
      transparent
    );
    animation: button-shimmer $animation-shimmer ease-in-out infinite;
  }
}

// Status container styling
@mixin ability-card-status {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-shrink: 0;
  width: $status-size;
  height: $status-size;
  min-height: $status-size;
  max-height: $status-size;
  min-width: $status-size;
  max-width: $status-size;
  padding: 0;
  margin: 0;
  border-radius: $radius-xs;
  background: themes.color(black, 30);
  border: $border-thin solid themes.color(white, 20);
  transition: all $transition-base ease;
  box-sizing: border-box;
  vertical-align: middle;
  position: relative;
  overflow: visible;

  &:hover {
    background: themes.color(black, 40);
    border-color: themes.color(white, 35);
  }
}

// Lock/unlock icon styling
@mixin ability-card-icon {
  font-size: $icon-font-size;
  opacity: $opacity-default;
  transition: all $transition-base ease;
  display: inline-block;
  line-height: $line-height;
  vertical-align: middle;
  margin: 0;
  padding: 0;
  text-decoration: none;
  text-transform: none;

  &:hover {
    opacity: $opacity-full;
    transform: scale($transform-scale-icon);
  }
}

// Ability variant mixin - consolidates repetitive patterns
@mixin ability-variant($color) {
  &::before {
    background: $color;
  }

  .eventide-ability-card__total-button {
    background: color.change($color, $alpha: 0.3);
    border: $border-thin solid color.change($color, $alpha: 0.5);
    text-shadow: 0 0 $shadow-blur-xs color.change($color, $alpha: 0.8);
    box-shadow:
      0 0 $shadow-blur-sm color.change($color, $alpha: 0.4),
      inset 0 $shadow-offset-xs 0 themes.color(white, 20);
    animation: ability-glow $animation-fast ease-in-out infinite alternate;

    &::before {
      background: linear-gradient(
        90deg,
        transparent,
        color.change($color, $alpha: 0.3),
        transparent
      );
    }

    &:hover {
      background: color.change($color, $alpha: 0.5);
      border-color: color.change($color, $alpha: 0.7);
      transform: scale($transform-scale-hover);
      box-shadow:
        0 0 $shadow-blur-lg color.change($color, $alpha: 0.6),
        inset 0 $shadow-offset-xs 0 themes.color(white, 30);
    }
  }

  &:hover {
    background: linear-gradient(
      135deg,
      color.change($color, $alpha: 0.2) 0%,
      color.change($color, $alpha: 0.1) 50%,
      color.change($color, $alpha: 0.05) 100%
    );
  }
}

// Ability pattern overlay mixin
@mixin ability-pattern($color, $pattern) {
  &:hover::after {
    content: '';
    position: absolute;
    inset: 0;
    background-image: url("data:image/svg+xml,#{$pattern}");
    pointer-events: none;
    z-index: 1;
  }
}

// ===================================
// ABILITY CARDS CONTAINER
// ===================================

.header-abilities {
  gap: $spacing-xs;
  padding: $spacing-xs;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  height: 100%;
}

// ===================================
// MAIN ABILITY CARD COMPONENT
// ===================================

.eventide-ability-card {
  @include ability-card-base;

  // Base styling with left border indicator
  &::before {
    @include ability-card-border-indicator;
  }

  &__content {
    position: relative;
    z-index: 2;
    display: flex;
    flex-direction: row;
    align-items: center;
    width: 100%;
    gap: $card-gap;
    justify-content: space-between;
  }

  &__header {
    flex-shrink: 0;
    min-width: $header-min-width;
    max-width: $header-max-width;
    width: $header-width;
  }

  &__label {
    font-size: $label-font-size;
    font-weight: $font-weight-semibold;
    color: themes.color(white, 80);
    text-transform: uppercase;
    letter-spacing: $letter-spacing;
    line-height: $line-height;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    cursor: help;
    transition: color $transition-base ease;

    &:hover {
      color: themes.color(white);
    }
  }

  &__stats {
    display: flex;
    align-items: center;
    gap: $card-gap;
    flex-grow: 1;
  }

  &__input {
    @include ability-card-input;
  }

  &__total-button {
    @include ability-card-button;
  }

  &__status {
    @include ability-card-status;
  }

  &__lock {
    @include ability-card-icon;

    color: #ff6b6b;
    text-shadow: 0 0 $shadow-blur-xs rgb(255 107 107 / 60%);
  }

  &__unlock {
    @include ability-card-icon;

    color: #4CAF50;
    text-shadow: 0 0 $shadow-blur-xs rgb(76 175 80 / 60%);
  }

  // Hover effects
  &:hover {
    transform: translateY($transform-hover-sm);
    box-shadow: 0 $shadow-offset-sm $shadow-blur-md themes.color(black, 30);

    &::before {
      width: 100%;
      opacity: 0.15;
    }
  }

  // ===================================
  // ABILITY-SPECIFIC STYLING
  // ===================================

  // Generate ability variants
  @each $ability, $color in $ability-colors {
    &--#{$ability} {
      @include ability-variant($color);

      // Ability-specific patterns
      @if $ability == "acro" {
        @include ability-pattern($color, "%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23bf4400' fill-opacity='0.1'%3E%3Cpath d='M10 2l2 6h6l-5 4 2 6-5-4-5 4 2-6-5-4h6z'/%3E%3C/g%3E%3C/svg%3E");
      } @else if $ability == "phys" {
        @include ability-pattern($color, "%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23a80303' fill-opacity='0.1'%3E%3Crect x='8' y='2' width='4' height='16'/%3E%3Crect x='2' y='8' width='16' height='4'/%3E%3C/g%3E%3C/svg%3E");
      } @else if $ability == "fort" {
        @include ability-pattern($color, "%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%232d682d' fill-opacity='0.1'%3E%3Cpath d='M10 2L4 6v8l6 4 6-4V6z'/%3E%3C/g%3E%3C/svg%3E");
      } @else if $ability == "will" {
        @include ability-pattern($color, "%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%236a1b9a' fill-opacity='0.1'%3E%3Ccircle cx='10' cy='10' r='8'/%3E%3Ccircle cx='10' cy='10' r='4'/%3E%3C/g%3E%3C/svg%3E");
      } @else if $ability == "wits" {
        @include ability-pattern($color, "%3Csvg width='20' height='20' viewBox='0 0 20 20' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%230e4380' fill-opacity='0.1'%3E%3Cpath d='M10 2l8 6-8 2-8-2z'/%3E%3Cpath d='M10 12l8 6-8-2-8 2z'/%3E%3C/g%3E%3C/svg%3E");
      }
    }
  }
}

// ===================================
// LEGACY ABILITY BOX SELECTORS
// ===================================
// These provide backward compatibility for existing templates

@each $ability, $color in $ability-colors {
  .eventide-ability-#{$ability}-box {
    background-color: color.change($color, $alpha: 0.1);
    border-left: $spacing-sm solid $color;
  }
}

// ===================================
// ANIMATIONS
// ===================================

// Unified glow animation for all abilities
@keyframes ability-glow {
  0% {
    box-shadow:
      0 0 $shadow-blur-sm rgb(var(--ability-color) / 40%),
      inset 0 $shadow-offset-xs 0 themes.color(white, 20);
  }

  100% {
    box-shadow:
      0 0 $glow-blur-sm rgb(var(--ability-color) / 60%),
      inset 0 $shadow-offset-xs 0 themes.color(white, 30);
  }
}

@keyframes button-shimmer {
  0% {
    left: -100%;
  }

  50% {
    left: 100%;
  }

  100% {
    left: 100%;
  }
}
